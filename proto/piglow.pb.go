// Code generated by protoc-gen-go.
// source: piglow.proto
// DO NOT EDIT!

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	piglow.proto

It has these top-level messages:
	LedRequest
	BrightnessRequest
	TentacleRequest
	ValueTentacleRequest
	Ack
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

type LedRequest struct {
	Num        int32  `protobuf:"varint,1,opt,name=num" json:"num,omitempty"`
	Brightness uint32 `protobuf:"varint,2,opt,name=brightness" json:"brightness,omitempty"`
}

func (m *LedRequest) Reset()                    { *m = LedRequest{} }
func (m *LedRequest) String() string            { return proto1.CompactTextString(m) }
func (*LedRequest) ProtoMessage()               {}
func (*LedRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *LedRequest) GetNum() int32 {
	if m != nil {
		return m.Num
	}
	return 0
}

func (m *LedRequest) GetBrightness() uint32 {
	if m != nil {
		return m.Brightness
	}
	return 0
}

type BrightnessRequest struct {
	Brightness uint32 `protobuf:"varint,1,opt,name=brightness" json:"brightness,omitempty"`
}

func (m *BrightnessRequest) Reset()                    { *m = BrightnessRequest{} }
func (m *BrightnessRequest) String() string            { return proto1.CompactTextString(m) }
func (*BrightnessRequest) ProtoMessage()               {}
func (*BrightnessRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *BrightnessRequest) GetBrightness() uint32 {
	if m != nil {
		return m.Brightness
	}
	return 0
}

type TentacleRequest struct {
	Tentacle   int32  `protobuf:"varint,1,opt,name=tentacle" json:"tentacle,omitempty"`
	Brightness uint32 `protobuf:"varint,2,opt,name=brightness" json:"brightness,omitempty"`
}

func (m *TentacleRequest) Reset()                    { *m = TentacleRequest{} }
func (m *TentacleRequest) String() string            { return proto1.CompactTextString(m) }
func (*TentacleRequest) ProtoMessage()               {}
func (*TentacleRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *TentacleRequest) GetTentacle() int32 {
	if m != nil {
		return m.Tentacle
	}
	return 0
}

func (m *TentacleRequest) GetBrightness() uint32 {
	if m != nil {
		return m.Brightness
	}
	return 0
}

type ValueTentacleRequest struct {
	Tentacle   int32   `protobuf:"varint,1,opt,name=tentacle" json:"tentacle,omitempty"`
	Val        float64 `protobuf:"fixed64,2,opt,name=val" json:"val,omitempty"`
	MaxVal     float64 `protobuf:"fixed64,3,opt,name=max_val,json=maxVal" json:"max_val,omitempty"`
	Brightness uint32  `protobuf:"varint,4,opt,name=brightness" json:"brightness,omitempty"`
	Direction  bool    `protobuf:"varint,5,opt,name=direction" json:"direction,omitempty"`
}

func (m *ValueTentacleRequest) Reset()                    { *m = ValueTentacleRequest{} }
func (m *ValueTentacleRequest) String() string            { return proto1.CompactTextString(m) }
func (*ValueTentacleRequest) ProtoMessage()               {}
func (*ValueTentacleRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ValueTentacleRequest) GetTentacle() int32 {
	if m != nil {
		return m.Tentacle
	}
	return 0
}

func (m *ValueTentacleRequest) GetVal() float64 {
	if m != nil {
		return m.Val
	}
	return 0
}

func (m *ValueTentacleRequest) GetMaxVal() float64 {
	if m != nil {
		return m.MaxVal
	}
	return 0
}

func (m *ValueTentacleRequest) GetBrightness() uint32 {
	if m != nil {
		return m.Brightness
	}
	return 0
}

func (m *ValueTentacleRequest) GetDirection() bool {
	if m != nil {
		return m.Direction
	}
	return false
}

type Ack struct {
	Ok bool `protobuf:"varint,1,opt,name=ok" json:"ok,omitempty"`
}

func (m *Ack) Reset()                    { *m = Ack{} }
func (m *Ack) String() string            { return proto1.CompactTextString(m) }
func (*Ack) ProtoMessage()               {}
func (*Ack) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Ack) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func init() {
	proto1.RegisterType((*LedRequest)(nil), "proto.LedRequest")
	proto1.RegisterType((*BrightnessRequest)(nil), "proto.BrightnessRequest")
	proto1.RegisterType((*TentacleRequest)(nil), "proto.TentacleRequest")
	proto1.RegisterType((*ValueTentacleRequest)(nil), "proto.ValueTentacleRequest")
	proto1.RegisterType((*Ack)(nil), "proto.Ack")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for PiGlow service

type PiGlowClient interface {
	// Set LED n to brightness
	SetLED(ctx context.Context, in *LedRequest, opts ...grpc.CallOption) (*Ack, error)
	// Set all LEDs to brightness
	SetAll(ctx context.Context, in *BrightnessRequest, opts ...grpc.CallOption) (*Ack, error)
	// Set all White LEDs to brightness
	SetWhite(ctx context.Context, in *BrightnessRequest, opts ...grpc.CallOption) (*Ack, error)
	// Set all Blue LEDs to brightness
	SetBlue(ctx context.Context, in *BrightnessRequest, opts ...grpc.CallOption) (*Ack, error)
	// Set all Green LEDs to brightness
	SetGreen(ctx context.Context, in *BrightnessRequest, opts ...grpc.CallOption) (*Ack, error)
	// Set all Yellow LEDs to brightness
	SetYellow(ctx context.Context, in *BrightnessRequest, opts ...grpc.CallOption) (*Ack, error)
	// Set all Orange LEDs to brightness
	SetOrange(ctx context.Context, in *BrightnessRequest, opts ...grpc.CallOption) (*Ack, error)
	// Set all Red LEDs to brightness
	SetRed(ctx context.Context, in *BrightnessRequest, opts ...grpc.CallOption) (*Ack, error)
	// Set all LEDs along the whole of a tentacle to brightness
	SetTentacle(ctx context.Context, in *TentacleRequest, opts ...grpc.CallOption) (*Ack, error)
	// Display a value on a tentacle
	DisplayValueOnTentacle(ctx context.Context, in *ValueTentacleRequest, opts ...grpc.CallOption) (*Ack, error)
}

type piGlowClient struct {
	cc *grpc.ClientConn
}

func NewPiGlowClient(cc *grpc.ClientConn) PiGlowClient {
	return &piGlowClient{cc}
}

func (c *piGlowClient) SetLED(ctx context.Context, in *LedRequest, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := grpc.Invoke(ctx, "/proto.PiGlow/SetLED", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *piGlowClient) SetAll(ctx context.Context, in *BrightnessRequest, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := grpc.Invoke(ctx, "/proto.PiGlow/SetAll", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *piGlowClient) SetWhite(ctx context.Context, in *BrightnessRequest, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := grpc.Invoke(ctx, "/proto.PiGlow/SetWhite", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *piGlowClient) SetBlue(ctx context.Context, in *BrightnessRequest, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := grpc.Invoke(ctx, "/proto.PiGlow/SetBlue", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *piGlowClient) SetGreen(ctx context.Context, in *BrightnessRequest, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := grpc.Invoke(ctx, "/proto.PiGlow/SetGreen", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *piGlowClient) SetYellow(ctx context.Context, in *BrightnessRequest, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := grpc.Invoke(ctx, "/proto.PiGlow/SetYellow", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *piGlowClient) SetOrange(ctx context.Context, in *BrightnessRequest, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := grpc.Invoke(ctx, "/proto.PiGlow/SetOrange", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *piGlowClient) SetRed(ctx context.Context, in *BrightnessRequest, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := grpc.Invoke(ctx, "/proto.PiGlow/SetRed", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *piGlowClient) SetTentacle(ctx context.Context, in *TentacleRequest, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := grpc.Invoke(ctx, "/proto.PiGlow/SetTentacle", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *piGlowClient) DisplayValueOnTentacle(ctx context.Context, in *ValueTentacleRequest, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := grpc.Invoke(ctx, "/proto.PiGlow/DisplayValueOnTentacle", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PiGlow service

type PiGlowServer interface {
	// Set LED n to brightness
	SetLED(context.Context, *LedRequest) (*Ack, error)
	// Set all LEDs to brightness
	SetAll(context.Context, *BrightnessRequest) (*Ack, error)
	// Set all White LEDs to brightness
	SetWhite(context.Context, *BrightnessRequest) (*Ack, error)
	// Set all Blue LEDs to brightness
	SetBlue(context.Context, *BrightnessRequest) (*Ack, error)
	// Set all Green LEDs to brightness
	SetGreen(context.Context, *BrightnessRequest) (*Ack, error)
	// Set all Yellow LEDs to brightness
	SetYellow(context.Context, *BrightnessRequest) (*Ack, error)
	// Set all Orange LEDs to brightness
	SetOrange(context.Context, *BrightnessRequest) (*Ack, error)
	// Set all Red LEDs to brightness
	SetRed(context.Context, *BrightnessRequest) (*Ack, error)
	// Set all LEDs along the whole of a tentacle to brightness
	SetTentacle(context.Context, *TentacleRequest) (*Ack, error)
	// Display a value on a tentacle
	DisplayValueOnTentacle(context.Context, *ValueTentacleRequest) (*Ack, error)
}

func RegisterPiGlowServer(s *grpc.Server, srv PiGlowServer) {
	s.RegisterService(&_PiGlow_serviceDesc, srv)
}

func _PiGlow_SetLED_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PiGlowServer).SetLED(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.PiGlow/SetLED",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PiGlowServer).SetLED(ctx, req.(*LedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PiGlow_SetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BrightnessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PiGlowServer).SetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.PiGlow/SetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PiGlowServer).SetAll(ctx, req.(*BrightnessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PiGlow_SetWhite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BrightnessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PiGlowServer).SetWhite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.PiGlow/SetWhite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PiGlowServer).SetWhite(ctx, req.(*BrightnessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PiGlow_SetBlue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BrightnessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PiGlowServer).SetBlue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.PiGlow/SetBlue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PiGlowServer).SetBlue(ctx, req.(*BrightnessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PiGlow_SetGreen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BrightnessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PiGlowServer).SetGreen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.PiGlow/SetGreen",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PiGlowServer).SetGreen(ctx, req.(*BrightnessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PiGlow_SetYellow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BrightnessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PiGlowServer).SetYellow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.PiGlow/SetYellow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PiGlowServer).SetYellow(ctx, req.(*BrightnessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PiGlow_SetOrange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BrightnessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PiGlowServer).SetOrange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.PiGlow/SetOrange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PiGlowServer).SetOrange(ctx, req.(*BrightnessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PiGlow_SetRed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BrightnessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PiGlowServer).SetRed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.PiGlow/SetRed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PiGlowServer).SetRed(ctx, req.(*BrightnessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PiGlow_SetTentacle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TentacleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PiGlowServer).SetTentacle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.PiGlow/SetTentacle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PiGlowServer).SetTentacle(ctx, req.(*TentacleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PiGlow_DisplayValueOnTentacle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValueTentacleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PiGlowServer).DisplayValueOnTentacle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.PiGlow/DisplayValueOnTentacle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PiGlowServer).DisplayValueOnTentacle(ctx, req.(*ValueTentacleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PiGlow_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.PiGlow",
	HandlerType: (*PiGlowServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetLED",
			Handler:    _PiGlow_SetLED_Handler,
		},
		{
			MethodName: "SetAll",
			Handler:    _PiGlow_SetAll_Handler,
		},
		{
			MethodName: "SetWhite",
			Handler:    _PiGlow_SetWhite_Handler,
		},
		{
			MethodName: "SetBlue",
			Handler:    _PiGlow_SetBlue_Handler,
		},
		{
			MethodName: "SetGreen",
			Handler:    _PiGlow_SetGreen_Handler,
		},
		{
			MethodName: "SetYellow",
			Handler:    _PiGlow_SetYellow_Handler,
		},
		{
			MethodName: "SetOrange",
			Handler:    _PiGlow_SetOrange_Handler,
		},
		{
			MethodName: "SetRed",
			Handler:    _PiGlow_SetRed_Handler,
		},
		{
			MethodName: "SetTentacle",
			Handler:    _PiGlow_SetTentacle_Handler,
		},
		{
			MethodName: "DisplayValueOnTentacle",
			Handler:    _PiGlow_DisplayValueOnTentacle_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "piglow.proto",
}

func init() { proto1.RegisterFile("piglow.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 369 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x94, 0x92, 0x4f, 0x4f, 0xf2, 0x40,
	0x10, 0xc6, 0xdf, 0x52, 0x28, 0x65, 0x5e, 0xff, 0xc0, 0x46, 0xb1, 0x41, 0x63, 0x48, 0x4f, 0x78,
	0x21, 0x0a, 0x77, 0x13, 0x10, 0xc3, 0x05, 0x83, 0x69, 0x0d, 0xc6, 0x93, 0x59, 0xca, 0x04, 0x9a,
	0x2e, 0x2d, 0xb6, 0x5b, 0xc1, 0x2f, 0xe2, 0xc5, 0x2f, 0x6b, 0xba, 0x14, 0x90, 0x62, 0x22, 0x3d,
	0x75, 0xe7, 0xe9, 0xfe, 0xe6, 0x99, 0xcc, 0x3e, 0x70, 0x30, 0xb3, 0xc7, 0xcc, 0x9b, 0xd7, 0x67,
	0xbe, 0xc7, 0x3d, 0x92, 0x13, 0x1f, 0xfd, 0x16, 0xa0, 0x87, 0x23, 0x03, 0xdf, 0x42, 0x0c, 0x38,
	0x29, 0x82, 0xec, 0x86, 0x53, 0x4d, 0xaa, 0x4a, 0xb5, 0x9c, 0x11, 0x1d, 0xc9, 0x25, 0xc0, 0xd0,
	0xb7, 0xc7, 0x13, 0xee, 0x62, 0x10, 0x68, 0x99, 0xaa, 0x54, 0x3b, 0x34, 0x7e, 0x28, 0x7a, 0x13,
	0x4a, 0xed, 0x75, 0xb5, 0x6a, 0xb3, 0x0d, 0x49, 0x3b, 0xd0, 0x03, 0x1c, 0x3f, 0xa1, 0xcb, 0xa9,
	0xc5, 0x70, 0x85, 0x54, 0x40, 0xe5, 0xb1, 0x14, 0xdb, 0xaf, 0xeb, 0x3f, 0x67, 0xf8, 0x92, 0xe0,
	0x64, 0x40, 0x59, 0x88, 0x69, 0x9a, 0x16, 0x41, 0x7e, 0xa7, 0x4c, 0x74, 0x93, 0x8c, 0xe8, 0x48,
	0xce, 0x20, 0x3f, 0xa5, 0x8b, 0xd7, 0x48, 0x95, 0x85, 0xaa, 0x4c, 0xe9, 0x62, 0x40, 0x59, 0xc2,
	0x3f, 0x9b, 0xf4, 0x27, 0x17, 0x50, 0x18, 0xd9, 0x3e, 0x5a, 0xdc, 0xf6, 0x5c, 0x2d, 0x57, 0x95,
	0x6a, 0xaa, 0xb1, 0x11, 0xf4, 0x53, 0x90, 0x5b, 0x96, 0x43, 0x8e, 0x20, 0xe3, 0x39, 0x62, 0x0a,
	0xd5, 0xc8, 0x78, 0x4e, 0xe3, 0x33, 0x0b, 0xca, 0xa3, 0xdd, 0x65, 0xde, 0x9c, 0x5c, 0x81, 0x62,
	0x22, 0xef, 0xdd, 0x77, 0x48, 0x69, 0xf9, 0x38, 0xf5, 0xcd, 0x93, 0x54, 0x20, 0x96, 0x5a, 0x96,
	0xa3, 0xff, 0x23, 0xd7, 0xe2, 0x6a, 0x8b, 0x31, 0xa2, 0xc5, 0xfa, 0xce, 0xf6, 0x13, 0x44, 0x03,
	0x54, 0x13, 0xf9, 0xf3, 0xc4, 0xe6, 0xb8, 0x37, 0x73, 0x03, 0x79, 0x13, 0x79, 0x9b, 0x85, 0x98,
	0xd2, 0xa6, 0xeb, 0x23, 0xba, 0x7b, 0x33, 0x4d, 0x28, 0x98, 0xc8, 0x5f, 0x90, 0x45, 0x4b, 0x48,
	0x07, 0xf5, 0x7d, 0xea, 0x8e, 0xf7, 0x9f, 0x6e, 0xb9, 0x36, 0x03, 0x47, 0x29, 0x6c, 0xfe, 0x9b,
	0xc8, 0x57, 0x81, 0x22, 0xe5, 0xf8, 0x67, 0x22, 0x61, 0x09, 0xe8, 0x0e, 0xca, 0x1d, 0x3b, 0x98,
	0x31, 0xfa, 0x21, 0xe2, 0xd8, 0x77, 0xd7, 0xfc, 0x79, 0x7c, 0xef, 0xb7, 0x98, 0x6e, 0x37, 0x19,
	0x2a, 0xa2, 0x68, 0x7e, 0x07, 0x00, 0x00, 0xff, 0xff, 0x82, 0x71, 0x9c, 0x98, 0xaf, 0x03, 0x00,
	0x00,
}
